# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Fri Jul  7 20:03:41 2023
#

import wx
from AppLogic import *
from wx_tools import *
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class RemoteConfigDlg(wx.Dialog):
    def __init__(self, app_logic: AppLogic, add_new: bool, *args, **kwds):
        self.app_logic = app_logic
        self.add_new = add_new
        # begin wxGlade: RemoteConfigDlg.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("Configuration editor")

        sizer_1 = wx.FlexGridSizer(6, 1, 0, 0)

        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Project name"), wx.HORIZONTAL)
        sizer_1.Add(sizer_5, 0, wx.ALL | wx.EXPAND, 0)

        self.text_project_name = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_5.Add(self.text_project_name, 5, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Host name / IP address"), wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.ALL | wx.EXPAND, 0)

        self.text_host = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_3.Add(self.text_host, 5, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Login"), wx.HORIZONTAL)
        sizer_1.Add(sizer_4, 1, wx.EXPAND, 0)

        self.text_username = wx.TextCtrl(self, wx.ID_ANY, "")
        sizer_4.Add(self.text_username, 0, 0, 0)

        sizer_8 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Password"), wx.HORIZONTAL)
        sizer_1.Add(sizer_8, 1, wx.EXPAND, 0)

        self.text_password = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.TE_PASSWORD)
        sizer_8.Add(self.text_password, 0, 0, 0)

        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Firmware targets"), wx.HORIZONTAL)
        sizer_1.Add(sizer_6, 1, wx.ALL | wx.EXPAND, 0)

        self.list_box_jsons = wx.ListBox(self, wx.ID_ANY, choices=[])
        sizer_6.Add(self.list_box_jsons, 1, wx.BOTTOM | wx.EXPAND | wx.LEFT | wx.RIGHT, 10)

        sizer_7 = wx.BoxSizer(wx.VERTICAL)
        sizer_6.Add(sizer_7, 0, wx.ALL, 0)

        self.button_add_json = wx.Button(self, wx.ID_ANY, "", style=wx.BU_AUTODRAW)
        self.button_add_json.SetBitmap(wx.Bitmap("icons/plus_48.png", wx.BITMAP_TYPE_ANY))
        sizer_7.Add(self.button_add_json, 1, wx.BOTTOM | wx.EXPAND | wx.RIGHT, 10)

        self.btn_remove_json = wx.Button(self, wx.ID_ANY, "")
        self.btn_remove_json.SetBitmap(wx.Bitmap("icons/minus_48.png", wx.BITMAP_TYPE_ANY))
        sizer_7.Add(self.btn_remove_json, 1, wx.BOTTOM | wx.EXPAND | wx.RIGHT, 10)

        self.button_edit_json = wx.Button(self, wx.ID_ANY, "")
        self.button_edit_json.SetBitmap(wx.Bitmap("icons/edit_48.png", wx.BITMAP_TYPE_ANY))
        sizer_7.Add(self.button_edit_json, 1, wx.BOTTOM | wx.EXPAND | wx.RIGHT, 10)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALL, 4)

        self.btn_ok = wx.Button(self, wx.ID_OK, "")
        self.btn_ok.SetDefault()
        sizer_2.AddButton(self.btn_ok)

        self.btn_cancel = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.btn_cancel)

        sizer_2.Realize()

        sizer_1.AddGrowableRow(0)
        sizer_1.AddGrowableRow(1)
        sizer_1.AddGrowableRow(2)
        sizer_1.AddGrowableRow(3)
        sizer_1.AddGrowableCol(0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.btn_ok.GetId())
        self.SetEscapeId(self.btn_cancel.GetId())

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_add_json, self.button_add_json)
        self.Bind(wx.EVT_BUTTON, self.on_remove_json, self.btn_remove_json)
        self.Bind(wx.EVT_BUTTON, self.on_edit_json, self.button_edit_json)
        self.Bind(wx.EVT_BUTTON, self.on_ok, self.btn_ok)
        # end wxGlade

        self.on_load()

    @property
    def ConfigName(self):
        return self.text_project_name.GetValue()

    def on_load_jsons(self):
        jsons = self.app_logic.JsonConfigs
        self.list_box_jsons.Items = jsons
        if jsons:
            self.list_box_jsons.Selection = 0

    def on_load(self):
        if not self.add_new:
            enable_controls([self.text_project_name], False)
            self.text_project_name.SetValue(self.app_logic.LastConfigName)
        else:
            enable_controls([self.button_edit_json], False)

        self.text_host.SetValue(self.app_logic.Host)
        self.text_username.SetValue(self.app_logic.UserName)
        self.text_password.SetValue(self.app_logic.Password)

        if not self.add_new:
            self.on_load_jsons()


    def on_ok(self, event):  # wxGlade: RemoteConfigDlg.<event_handler>
        project_name = self.text_project_name.GetValue()
        if not project_name or ' ' in project_name or '/' in project_name:
            show_error(self, "Project name must not be empty and doesn't contain spaces or /")
            return

        jsons = self.list_box_jsons.GetStrings()

        try:
            pytools.ssh_test_connection(self.text_host.GetValue(),
                                        self.text_username.GetValue(),
                                        self.text_password.GetValue())
        except Exception as ex:
            wx_tools.show_error(self, f'Failed to test SSH connection: {str(ex)}')
            return

        self.app_logic.set_configuration(self.text_project_name.GetValue(),
                                         self.text_host.GetValue(),
                                         self.text_username.GetValue(),
                                         self.text_password.GetValue(),
                                         None,
                                         jsons)
        self.app_logic.save_config()
        event.Skip()

    def on_add_json(self, event):  # wxGlade: RemoteConfigDlg.<event_handler>
        with wx.TextEntryDialog(self, message='Enter new json file name', caption='Add json file') as dlg:
            dlg.SetValue('.json')
            if dlg.ShowModal() != wx.ID_OK:
                return

            project_name = self.text_project_name.GetValue()
            res = dlg.Value
            if not res:
                wx_tools.show_error(self, "File name may not be empty.")
                return

            if res in self.list_box_jsons.GetStrings():
                wx_tools.show_error(self, "This json file is already added.")
                return

            indx = self.list_box_jsons.Append(res)
            self.list_box_jsons.Selection = indx
        event.Skip()
    def on_remove_json(self, event):  # wxGlade: RemoteConfigDlg.<event_handler>
        idx = self.list_box_jsons.Selection
        if idx!=-1:
            self.list_box_jsons.Delete(idx)
            if self.list_box_jsons.Count:
                self.list_box_jsons.SetSelection(0)

        event.Skip()
    def on_edit_json(self, event):  # wxGlade: RemoteConfigDlg.<event_handler>
        print("Event handler 'on_edit_json' not implemented!")
        event.Skip()
# end of class RemoteConfigDlg
