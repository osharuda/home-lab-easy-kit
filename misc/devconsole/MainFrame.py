# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Fri Jul  7 20:03:41 2023
#

import wx

import wx_tools
from LocalConfigDlg import *
from RemoteConfigDlg import *
from AppLogic import *
from SelectFirmware import *
import wx.lib.newevent as NE
import threading
import functools

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

LogEvent, EVT_LOG = NE.NewEvent()
RelogEvent, EVT_RELOG = NE.NewEvent()
CompleteEvent, EVT_COMPLETE = NE.NewEvent()
SetStatusEvent, EVT_SET_STATUS = NE.NewEvent()


class MainFrame(wx.Frame):
# region ---------------------    CONSTRUCTION
    def __init__(self, *args, **kwds):
        self.app_logic = AppLogic(self.make_log,
                                  self.make_relog,
                                  self.set_status,
                                  self.ask_confirmation)
        self.log = ""
        self.prev_log_len = 0
        self.norm_message_len = 80
        self.confirmation_cond_var = threading.Condition()
        self.confirmation_result = False

        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((2560, 1440))
        self.SetTitle("HLEK Developer Console")
        _icon = wx.NullIcon
        _icon.CopyFromBitmap(wx.Bitmap("icons/icon.png", wx.BITMAP_TYPE_ANY))
        self.SetIcon(_icon)

        self.frame_statusbar = self.CreateStatusBar(1, wx.STB_ELLIPSIZE_END)
        self.frame_statusbar.SetStatusWidths([-1])
        # statusbar fields
        frame_statusbar_fields = ["Ready"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        toolbar_sizer = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(toolbar_sizer, 0, wx.EXPAND, 0)

        sizer_4 = wx.BoxSizer(wx.VERTICAL)
        toolbar_sizer.Add(sizer_4, 1, 0, 0)

        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_4.Add(sizer_5, 1, 0, 0)

        label_1 = wx.StaticText(self, wx.ID_ANY, "Host configuration")
        sizer_5.Add(label_1, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.btn_nfs_config = wx.Button(self, wx.ID_ANY, "")
        self.btn_nfs_config.SetBitmap(wx.Bitmap("icons/hammer_and_wrench_48.png", wx.BITMAP_TYPE_ANY))
        sizer_5.Add(self.btn_nfs_config, 0, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 0)

        sizer_5.Add((60, 20), 0, 0, 0)

        label_3 = wx.StaticText(self, wx.ID_ANY, "Remote configuration: ", style=wx.ALIGN_CENTER_HORIZONTAL)
        sizer_5.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        self.choice_remote_config = wx.Choice(self, wx.ID_ANY, choices=[])
        sizer_5.Add(self.choice_remote_config, 0, wx.EXPAND | wx.RIGHT, 0)

        self.button_delete_remote_config = wx.Button(self, wx.ID_ANY, "")
        self.button_delete_remote_config.SetBitmap(wx.Bitmap("icons/minus_48.png", wx.BITMAP_TYPE_ANY))
        sizer_5.Add(self.button_delete_remote_config, 0, wx.EXPAND | wx.RIGHT, 0)

        self.button_edit_config = wx.Button(self, wx.ID_ANY, "")
        self.button_edit_config.SetBitmap(wx.Bitmap("icons/edit_48.png", wx.BITMAP_TYPE_ANY))
        sizer_5.Add(self.button_edit_config, 0, wx.EXPAND | wx.RIGHT, 0)

        self.button_new_config = wx.Button(self, wx.ID_ANY, "")
        self.button_new_config.SetBitmap(wx.Bitmap("icons/plus_48.png", wx.BITMAP_TYPE_ANY))
        sizer_5.Add(self.button_new_config, 0, wx.EXPAND | wx.RIGHT, 0)

        self.btn_deploy_software = wx.Button(self, wx.ID_ANY, "")
        self.btn_deploy_software.SetBitmap(wx.Bitmap("icons/install_48.png", wx.BITMAP_TYPE_ANY))
        sizer_5.Add(self.btn_deploy_software, 0, wx.EXPAND | wx.RIGHT, 0)

        self.btn_deploy = wx.Button(self, wx.ID_ANY, "PROJECT")
        sizer_5.Add(self.btn_deploy, 0, wx.EXPAND | wx.RIGHT, 0)

        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.BORDER_NONE)
        toolbar_sizer.Add(self.panel_1, 1, wx.EXPAND, 0)

        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        toolbar_sizer.Add(sizer_3, 0, wx.ALIGN_CENTER_VERTICAL, 0)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_3.Add(sizer_2, 0, wx.EXPAND, 0)

        label_4 = wx.StaticText(self, wx.ID_ANY, "Build type")
        sizer_2.Add(label_4, 1, wx.ALIGN_CENTER_VERTICAL | wx.RIGHT, 0)

        self.checkbox_rebuild = wx.CheckBox(self, wx.ID_ANY, "Re-")
        sizer_2.Add(self.checkbox_rebuild, 0, wx.EXPAND | wx.RIGHT, 0)

        self.choice_build_type = wx.Choice(self, wx.ID_ANY, choices=["Debug", "Release"])
        self.choice_build_type.SetSelection(0)
        sizer_2.Add(self.choice_build_type, 0, wx.EXPAND | wx.RIGHT, 0)

        self.btn_build = wx.Button(self, wx.ID_ANY, "BUILD")
        sizer_2.Add(self.btn_build, 0, wx.EXPAND | wx.RIGHT, 0)

        sizer_2.Add((60, 20), 0, wx.EXPAND | wx.RIGHT, 0)

        self.choice_last_json = wx.Choice(self, wx.ID_ANY, choices=["choice 1"])
        self.choice_last_json.SetSelection(0)
        sizer_2.Add(self.choice_last_json, 0, wx.EXPAND | wx.RIGHT, 0)

        self.btn_flash = wx.Button(self, wx.ID_ANY, "")
        self.btn_flash.SetBitmap(wx.Bitmap("icons/chip_48.png", wx.BITMAP_TYPE_ANY))
        sizer_2.Add(self.btn_flash, 0, wx.EXPAND, 20)

        self.btn_Kill = wx.Button(self, wx.ID_ANY, "")
        self.btn_Kill.SetBitmap(wx.Bitmap("icons/cross_48.png", wx.BITMAP_TYPE_ANY))
        sizer_2.Add(self.btn_Kill, 0, 0, 0)

        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_6, 1, wx.EXPAND, 0)

        self.btn_debug_fw = wx.Button(self, wx.ID_ANY, "Debug FW")
        self.btn_debug_fw.SetBitmap(wx.Bitmap("icons/chip_debug_48.png", wx.BITMAP_TYPE_ANY))
        sizer_6.Add(self.btn_debug_fw, 0, 0, 0)

        self.btn_run_monitor = wx.Button(self, wx.ID_ANY, "Run Mon")
        self.btn_run_monitor.SetBitmap(wx.Bitmap("icons/monitor.png", wx.BITMAP_TYPE_ANY))
        sizer_6.Add(self.btn_run_monitor, 0, 0, 0)

        self.btn_debug_monitor = wx.Button(self, wx.ID_ANY, "Debug Mon")
        self.btn_debug_monitor.SetBitmap(wx.Bitmap("icons/monitor_debug.png", wx.BITMAP_TYPE_ANY))
        sizer_6.Add(self.btn_debug_monitor, 0, 0, 0)

        self.btn_deploy_dts = wx.Button(self, wx.ID_ANY, "Deploy DTS")
        sizer_6.Add(self.btn_deploy_dts, 0, 0, 0)

        self.btn_build_mod = wx.Button(self, wx.ID_ANY, "Build KO")
        sizer_6.Add(self.btn_build_mod, 0, 0, 0)

        self.btn_ins_mod = wx.Button(self, wx.ID_ANY, "Ins Mod")
        sizer_6.Add(self.btn_ins_mod, 0, 0, 0)

        self.btn_reboot = wx.Button(self, wx.ID_ANY, "Reboot")
        sizer_6.Add(self.btn_reboot, 0, 0, 0)

        static_line_2 = wx.StaticLine(self, wx.ID_ANY)
        sizer_1.Add(static_line_2, 0, wx.EXPAND, 0)

        self.text_log = wx.TextCtrl(self, wx.ID_ANY, "\t", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.text_log.SetMinSize((1128, 800))
        self.text_log.SetBackgroundColour(wx.Colour(0, 0, 0))
        self.text_log.SetForegroundColour(wx.Colour(255, 255, 255))
        self.text_log.SetFont(wx.Font(12, wx.FONTFAMILY_TELETYPE, wx.FONTSTYLE_NORMAL, wx.FONTWEIGHT_NORMAL, 0, "Monospace"))
        sizer_1.Add(self.text_log, 100, wx.ALL | wx.EXPAND, 0)

        self.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_nfs_config, self.btn_nfs_config)
        self.Bind(wx.EVT_CHOICE, self.on_remote_config_changed, self.choice_remote_config)
        self.Bind(wx.EVT_BUTTON, self.on_delete_remote_config, self.button_delete_remote_config)
        self.Bind(wx.EVT_BUTTON, self.on_edit_config, self.button_edit_config)
        self.Bind(wx.EVT_BUTTON, self.on_new_config, self.button_new_config)
        self.Bind(wx.EVT_BUTTON, self.on_install_software, self.btn_deploy_software)
        self.Bind(wx.EVT_BUTTON, self.on_create_project, self.btn_deploy)
        self.Bind(wx.EVT_CHOICE, self.on_build_type_choise, self.choice_build_type)
        self.Bind(wx.EVT_BUTTON, self.on_build, self.btn_build)
        self.Bind(wx.EVT_CHOICE, self.on_last_json_select, self.choice_last_json)
        self.Bind(wx.EVT_BUTTON, self.on_flash, self.btn_flash)
        self.Bind(wx.EVT_BUTTON, self.on_kill, self.btn_Kill)
        self.Bind(wx.EVT_BUTTON, self.on_debug_fw, self.btn_debug_fw)
        self.Bind(wx.EVT_BUTTON, self.on_run_monitor, self.btn_run_monitor)
        self.Bind(wx.EVT_BUTTON, self.on_debug_monitor, self.btn_debug_monitor)
        self.Bind(wx.EVT_SIZE, self.on_resize, self)
        # end wxGlade
        self.disabled_controls = []
        self.all_controls = [self.btn_nfs_config, self.choice_remote_config, self.button_delete_remote_config,
                             self.button_edit_config, self.button_new_config, self.choice_build_type,
                             self.btn_deploy_software, self.btn_build, self.btn_flash, self.btn_deploy]

        # OnComplete event
        self.Bind(EVT_COMPLETE, self.on_complete)
        self.Bind(EVT_LOG, self.on_log)
        self.Bind(EVT_RELOG, self.on_relog)
        self.Bind(EVT_SET_STATUS, self.on_set_status)

        self.on_load()
# endregion

# region ---------------------    LOGGING
    def on_log(self, event):
        self.log += event.__getattr__("message")
        self.prev_log_len = len(self.log)
        self.text_log.SetValue(self.log)

    def on_relog(self, event):
        self.log = self.log[0:self.prev_log_len] + event.__getattr__("message")
        self.text_log.SetValue(self.log)

    def make_log(self, message: str):
        ev = LogEvent(message=message)
        wx.PostEvent(self, ev)

    def make_relog(self, message: str):
        ev = RelogEvent(message=message)
        wx.PostEvent(self, ev)

# endregion

# region ---------------------    CUSTOM EVENT HANDLERS AND CALLBACKS
    def on_complete(self, event):
        self.job_thread.join()
        wx_tools.enable_controls(self.disabled_controls, True)
        self.disabled_controls = []

    def on_complete_handler(self, result):
        success, message = result
        if success:
            self.make_relog("[OK]" + os.linesep)
        else:
            self.make_relog("[FAIL]" + os.linesep + message + os.linesep)
        wx.PostEvent(self, CompleteEvent())

    def on_set_status(self, event):
        self.frame_statusbar.SetStatusText(event.__getattr__("status"))

    def set_status(self, status: str):
        ev = SetStatusEvent(status=status)
        wx.PostEvent(self, ev)

    def on_ask_confirmation(self, message: str, title: str, result: dict):
        result = wx.MessageBox(message, title, wx.YES_NO, None) == wx.YES
        with self.confirmation_cond_var:
            self.confirmation_result = result
            self.confirmation_cond_var.notify()

    def ask_confirmation(self, message: str, title: str = None):
        result = False
        self.confirmation_result = None
        caller = wx.CallAfter(self.on_ask_confirmation, message=message, title=title, result=result)
        with self.confirmation_cond_var:
            while self.confirmation_result is None:
                self.confirmation_cond_var.wait()
                result = self.confirmation_result

        return result


# endregion

    def finish_frame_config(self):
        # Limit size
        self.SetMinSize((1700, 1000))

    def on_load(self):
        self.finish_frame_config()
        self.load_config_choise()
        self.on_config_selected(self.app_logic.get_last_configuration()[0])
        set_choise(self.choice_build_type, self.app_logic.BuildType)

    def load_config_choise(self):
        config_names = self.app_logic.get_configuration_names()

        i = 0
        di = 0
        for name in config_names:
            i = self.choice_remote_config.Append(name)
            self.choice_remote_config.SetString(i, name)
            if name == self.app_logic.LastConfigName:
                di = i
        self.choice_remote_config.SetSelection(di)

    def on_config_selected(self, config_name):
        affected_controls = [self.choice_build_type, self.choice_build_type, self.btn_build, self.btn_deploy,
                             self.btn_build, self.btn_flash, self.button_delete_remote_config, self.button_edit_config]

        config_names = self.app_logic.get_configuration_names()
        if len(config_names)==0:
            config_name = None
        elif config_name not in config_names:
            config_name = config_names[0]
            self.app_logic.LastConfigName = config_name
        else:
            self.app_logic.LastConfigName = config_name

        enable_json = True if config_name else False

        if enable_json:
            self.select_last_json()

        enable_controls(affected_controls, enable_json)

    def select_last_json(self, newjson: str = None):
        if newjson:
            self.app_logic.LastJson = newjson

        jsons = self.app_logic.LastConfiguration[self.app_logic.KEY_JSONS]
        newjson = self.app_logic.LastJson

        self.choice_last_json.Set(jsons)
        wx_tools.set_choise(self.choice_last_json, newjson)

    def on_nfs_config(self, event):  # wxGlade: MainFrame.<event_handler>
        with LocalConfigDlg(self.app_logic, self) as dlg:
            if dlg.ShowModal() == wx.ID_OK:
                try:
                    self.app_logic.save_config()
                except Exception as ex:
                    show_error(self, "Failed to save configuration: " + str(ex))

        event.Skip()

    def on_edit_config(self, event):  # wxGlade: MainFrame.<event_handler>
        if self.app_logic.LastConfigName:
            with RemoteConfigDlg(self.app_logic, False, self) as dlg:
                if dlg.ShowModal() == wx.ID_OK:
                    self.on_remote_config_changed(event)
        event.Skip()

    def update_config(self):
        evt = wx.PyCommandEvent(wx.EVT_CHOICE.typeId, self.choice_remote_config.GetId())
        wx.PostEvent(self, evt)

    def on_new_config(self, event):  # wxGlade: MainFrame.<event_handler>
        with RemoteConfigDlg(self.app_logic, True, self) as dlg:
            if dlg.ShowModal()==wx.ID_OK:
                idx = self.choice_remote_config.Append(dlg.ConfigName)
                self.choice_remote_config.Selection = idx
        self.update_config()
        event.Skip()

    def on_delete_remote_config(self, event):  # wxGlade: MainFrame.<event_handler>
        # Get current configuration
        idx = self.choice_remote_config.Selection
        if idx >= 0:
            del self.app_logic.LastConfigName
            self.choice_remote_config.Delete(idx)
            if self.app_logic.LastConfigName:
                idx = self.choice_remote_config.FindString(self.app_logic.LastConfigName)
                self.choice_remote_config.Selection = idx

            self.app_logic.save_config()
        self.update_config()
        event.Skip()

    def on_build_type_choise(self, event):  # wxGlade: MainFrame.<event_handler>
        bt = self.choice_build_type.GetString(self.choice_build_type.Selection)
        self.app_logic.BuildType = bt
        event.Skip()

    def on_build(self, event):  # wxGlade: MainFrame.<event_handler>
        self.make_log(pytools.normalize_string_length(f'Building __DOTS__ ', self.norm_message_len))
        self.disabled_controls = wx_tools.enable_controls(self.all_controls, False)

        rebuild = self.checkbox_rebuild.GetValue()
        self.checkbox_rebuild.SetValue(False)

        taskname = "rebuild" if rebuild else "build"
        self.job_thread = self.app_logic.run_task(self.app_logic.make_task_names(taskname),
                                                  functools.partial(self.app_logic.build_project, rebuild),
                                                  self.on_complete_handler)
        event.Skip()

    def on_flash(self, event):  # wxGlade: MainFrame.<event_handler>
        with SelectFirmware(self.app_logic, self) as dlg:
            if dlg.ShowModal() == wx.ID_OK:
                json = dlg.SelectedJson
                self.app_logic.last_json = json

                self.make_log(
                    pytools.normalize_string_length(f'Flashing firmware ({json}) __DOTS__ ', self.norm_message_len))
                self.disabled_controls = wx_tools.enable_controls(self.all_controls, False)

                self.job_thread = self.app_logic.run_task(self.app_logic.make_task_names("flash_firmware", json),
                                                          functools.partial(self.app_logic.flash_firmware, json),
                                                          self.on_complete_handler)
        event.Skip()

    def on_remote_config_changed(self, event):  # wxGlade: MainFrame.<event_handler>
        idx = self.choice_remote_config.GetSelection()
        config_name = self.choice_remote_config.GetString(idx)
        self.on_config_selected(config_name)
        event.Skip()

    def on_resize(self, event):  # wxGlade: MainFrame.<event_handler>
        event.Skip()

    def on_install_software(self, event):  # wxGlade: MainFrame.<event_handler>
        self.make_log(pytools.normalize_string_length(f'Updating and installing software __DOTS__ ', self.norm_message_len))
        self.disabled_controls = wx_tools.enable_controls(self.all_controls, False)

        self.job_thread = self.app_logic.run_task(self.app_logic.make_task_names("Deploy_software"),
                                                  self.app_logic.deploy_software,
                                                  self.on_complete_handler)
        event.Skip()

    def on_create_project(self, event):  # wxGlade: MainFrame.<event_handler>
        self.make_log(pytools.normalize_string_length(f'Creating project directory __DOTS__ ', self.norm_message_len))
        self.disabled_controls = wx_tools.enable_controls(self.all_controls, False)

        self.job_thread = self.app_logic.run_task(self.app_logic.make_task_names("Create_Project"),
                                                  self.app_logic.create_project_directory,
                                                  self.on_complete_handler)
        event.Skip()

    def on_last_json_select(self, event):  # wxGlade: MainFrame.<event_handler>
        newjson = None
        indx = self.choice_last_json.GetSelection()
        if indx != wx.NOT_FOUND:
            newjson = self.choice_last_json.GetString(indx)
        self.select_last_json(newjson)

        event.Skip()

    def on_kill(self, event):  # wxGlade: MainFrame.<event_handler>
        self.app_logic.kill_current_tasks()
        event.Skip()

    def on_debug_fw(self, event):  # wxGlade: MainFrame.<event_handler>
        try:
            self.app_logic.debug_fw()
        except Exception as ex:
            wx_tools.show_error(self, f"Can't start debugging: {str(ex)}")
        event.Skip()

    def on_run_monitor(self, event):  # wxGlade: MainFrame.<event_handler>
        try:
            self.app_logic.run_monitor()
        except Exception as ex:
            wx_tools.show_error(self, f"Can't start debugging: {str(ex)}")
        event.Skip()

    def on_debug_monitor(self, event):  # wxGlade: MainFrame.<event_handler>
        self.app_logic.debug_monitor()
        event.Skip()

# end of class MainFrame
