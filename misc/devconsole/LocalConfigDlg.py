# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.4 on Fri Jul  7 20:03:41 2023
#
import os.path

import wx

import wx_tools
from wx_tools import *
from pytools import *
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class LocalConfigDlg(wx.Dialog):
    def __init__(self, app_logic, *args, **kwds):
        self.app_logic = app_logic
        # begin wxGlade: LocalConfigDlg.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetTitle("dialog")

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_4 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "NFS URI (make sure share is exported with no_root_squash option)"), wx.HORIZONTAL)
        sizer_1.Add(sizer_4, 1, wx.ALL | wx.EXPAND, 10)

        self.text_nfs_uri = wx.TextCtrl(self, wx.ID_ANY, "ip:/mnt/SHARE")
        self.text_nfs_uri.SetMinSize((640, -1))
        sizer_4.Add(self.text_nfs_uri, 0, wx.ALL | wx.EXPAND, 0)

        sizer_5 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "NFS local root"), wx.HORIZONTAL)
        sizer_1.Add(sizer_5, 1, wx.ALL | wx.EXPAND, 10)

        self.text_local_path = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_local_path.SetMinSize((640, -1))
        sizer_5.Add(self.text_local_path, 0, wx.ALL, 0)

        self.button_browse_local_path = wx.Button(self, wx.ID_ANY, "")
        self.button_browse_local_path.SetBitmap(wx.Bitmap("icons/folder_48.png", wx.BITMAP_TYPE_ANY))
        sizer_5.Add(self.button_browse_local_path, 0, wx.ALL | wx.EXPAND, 0)

        sizer_3 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Local path to CMSIS Library"), wx.HORIZONTAL)
        sizer_1.Add(sizer_3, 1, wx.EXPAND, 0)

        self.text_cmsis_dir = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_cmsis_dir.SetMinSize((640, -1))
        sizer_3.Add(self.text_cmsis_dir, 0, 0, 0)

        self.button_browse_local_cmsis = wx.Button(self, wx.ID_ANY, "")
        self.button_browse_local_cmsis.SetBitmap(wx.Bitmap("icons/folder_48.png", wx.BITMAP_TYPE_ANY))
        sizer_3.Add(self.button_browse_local_cmsis, 0, 0, 0)

        sizer_7 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "HLEK root"), wx.HORIZONTAL)
        sizer_1.Add(sizer_7, 1, wx.EXPAND, 0)

        self.text_hlek_dir = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_hlek_dir.SetMinSize((640, -1))
        sizer_7.Add(self.text_hlek_dir, 0, 0, 0)

        self.button_browse_hlek = wx.Button(self, wx.ID_ANY, "")
        self.button_browse_hlek.SetBitmap(wx.Bitmap("icons/folder_48.png", wx.BITMAP_TYPE_ANY))
        sizer_7.Add(self.button_browse_hlek, 0, 0, 0)

        sizer_8 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Editor"), wx.HORIZONTAL)
        sizer_1.Add(sizer_8, 1, wx.EXPAND, 0)

        self.text_editor_path = wx.TextCtrl(self, wx.ID_ANY, "")
        self.text_editor_path.SetMinSize((640, -1))
        sizer_8.Add(self.text_editor_path, 0, 0, 0)

        self.button_browse_editor = wx.Button(self, wx.ID_ANY, "")
        self.button_browse_editor.SetBitmap(wx.Bitmap("icons/folder_48.png", wx.BITMAP_TYPE_ANY))
        sizer_8.Add(self.button_browse_editor, 0, 0, 0)

        sizer_2 = wx.StdDialogButtonSizer()
        sizer_1.Add(sizer_2, 0, wx.ALL, 4)

        self.button_OK = wx.Button(self, wx.ID_OK, "")
        self.button_OK.SetDefault()
        sizer_2.AddButton(self.button_OK)

        self.button_CANCEL = wx.Button(self, wx.ID_CANCEL, "")
        sizer_2.AddButton(self.button_CANCEL)

        sizer_2.Realize()

        self.SetSizer(sizer_1)
        sizer_1.Fit(self)

        self.SetAffirmativeId(self.button_OK.GetId())
        self.SetEscapeId(self.button_CANCEL.GetId())

        self.Layout()

        self.Bind(wx.EVT_BUTTON, self.on_local_share_browse, self.button_browse_local_path)
        self.Bind(wx.EVT_BUTTON, self.on_cmsis_browse, self.button_browse_local_cmsis)
        self.Bind(wx.EVT_BUTTON, self.on_hlek_browse, self.button_browse_hlek)
        self.Bind(wx.EVT_BUTTON, self.on_editor_browse, self.button_browse_editor)
        self.Bind(wx.EVT_BUTTON, self.on_ok, self.button_OK)
        # end wxGlade

        self.text_nfs_uri.SetValue(self.app_logic.dir_nfs_uri)
        self.text_local_path.SetValue(self.app_logic.mount_point)
        self.text_cmsis_dir.SetValue(self.app_logic.dir_cmsis)
        self.text_hlek_dir.SetValue(self.app_logic.dir_hlek)
        self.text_editor_path.SetValue(self.app_logic.bin_editor)

    def on_local_share_browse(self, event):  # wxGlade: LocalConfigDlg.<event_handler>
        res = wx_tools.browse_directory(self, "Specify NFS share directory (local) ...")
        if res:
            self.text_local_path.SetValue(res)
        event.Skip()

    def on_cmsis_browse(self, event):  # wxGlade: LocalConfigDlg.<event_handler>
        res = wx_tools.browse_directory(self, "Specify CMSIS library ...")
        if res:
            self.text_cmsis_dir.SetValue(res)
        event.Skip()

    def on_editor_browse(self, event):  # wxGlade: LocalConfigDlg.<event_handler>
        res = wx_tools.browse_file_open(self, "Specify text editor ...", None, None)
        if res:
            self.text_editor_path.SetValue(res)
        event.Skip()

    def on_hlek_browse(self, event):  # wxGlade: LocalConfigDlg.<event_handler>
        res = wx_tools.browse_directory(self, "Specify HLEK directory (local) ...")
        if res:
            self.text_hlek_dir.SetValue(res)
        event.Skip()

    def on_ok(self, event):  # wxGlade: LocalConfigDlg.<event_handler>
        try:
            if not self.text_nfs_uri.GetValue():
                raise RuntimeError("NFS URI must not be empty.")

            if not self.text_local_path.GetValue():
                raise RuntimeError("NFS share local path must not be empty.")

            if not self.text_hlek_dir.GetValue():
                raise RuntimeError("HLEK directory must not be empty.")

            if not self.text_cmsis_dir.GetValue():
                raise RuntimeError("CMSIS directory must not be empty.")

            if not self.text_editor_path.GetValue():
                raise RuntimeError("Text editor must not be empty.")

            if not is_executable_file(self.text_editor_path.GetValue()):
                raise RuntimeError("Editor file must be an executable.")

            if not is_parent_of(self.text_hlek_dir.GetValue(), self.text_local_path.GetValue()):
                raise RuntimeError("HLEK directory must be a subdirectory of NFS share directory")

            if not is_parent_of(self.text_cmsis_dir.GetValue(), self.text_local_path.GetValue()):
                raise RuntimeError("CMSIS library directory must be a subdirectory of NFS share directory")

            sudopasswd = request_sudo_passwd(self, "Enter sudo password (required to test NFS share)")
            if not sudopasswd:
                return

            verify_nfs_share(sudopasswd, self.text_nfs_uri.GetValue())

        except Exception as exc:
            show_error(self, str(exc))
            return


        self.app_logic.dir_nfs_uri = self.text_nfs_uri.GetValue()
        self.app_logic.mount_point = self.text_local_path.GetValue()
        self.app_logic.dir_hlek = self.text_hlek_dir.GetValue()
        self.app_logic.dir_cmsis = self.text_cmsis_dir.GetValue()
        self.app_logic.bin_editor = self.text_editor_path.GetValue()

        event.Skip()


# end of class LocalConfigDlg
