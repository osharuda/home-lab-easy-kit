/**
 *   Copyright 2021 Oleh Sharuda <oleh.sharuda@gmail.com>
 *
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */

/*!  \file
 *   \brief AD9850Dev device header.
 *   \author Oleh Sharuda
 */

#pragma once

#ifdef AD9850DEV_DEVICE_ENABLED

/// \defgroup group_ad9850dev AD9850Dev
/// \brief AD9850Dev support
/// @{
/// \page page_ad9850dev
/// \tableofcontents
///
/// \section sect_ad9850dev_01 AD9850Dev operation
/// In order to control device softwaere should write \ref AD9850Command structure into device.
/// This structure is treated as a command, it's content reflects the way AD9850 is being controlled via parallel interface.
/// For details read manufacturer documentation: <a href="https://www.analog.com/media/en/technical-documentation/data-sheets/AD9850.pdf">AD9850 documentation</a> ("Programming the AD9850", pages 9-12)
/// If reset should be performed before operation \ref AD9850DEV_RESET must be set in a command byte (CommCommandHeader#command_byte)
///

/// \struct AD9850DevPrivData
/// \brief Structure that describes private AD9850Dev data
struct __attribute__ ((aligned)) AD9850DevPrivData {
    /// \brief THe last command sent to AD9850. It may be read from virtual device.
    struct AD9850Command command;
};

/// \struct AD9850DevInstance
/// \brief Structure that describes AD9850Dev virtual device
struct __attribute__ ((aligned)) AD9850DevInstance {
        ///< Virtual device context
        struct DeviceContext      dev_ctx __attribute__ ((aligned));

        ///< Private data used by this AD9850Dev device
        struct AD9850DevPrivData   privdata;

        ///< Autogenerated functions to set GPIO lines. Customizer tracks
        ///< GPIO lines required for this data bus and optimizes writes
        ///< to ports using code generation.
        void (*p_set_gpio_data)(uint8_t);

        ///< DATA 0 port
        GPIO_TypeDef*                D0_port;

        ///< DATA 1 port
        GPIO_TypeDef*                D1_port;

        ///< DATA 2 port
        GPIO_TypeDef*                D2_port;

        ///< DATA 3 port
        GPIO_TypeDef*                D3_port;

        ///< DATA 4 port
        GPIO_TypeDef*                D4_port;

        ///< DATA 5 port
        GPIO_TypeDef*                D5_port;

        ///< DATA 6 port
        GPIO_TypeDef*                D6_port;

        ///< DATA 7 port
        GPIO_TypeDef*                D7_port;

        ///< RESET port
        GPIO_TypeDef*                RESET_port;

        ///< FQ_UD port
        GPIO_TypeDef*                FQ_UD_port;

        ///< W_CLK port
        GPIO_TypeDef*                W_CLK_port;

        ///< DATA 0 pin mask
        uint16_t                     D0_pin_mask;

        ///< DATA 1 pin mask
        uint16_t                     D1_pin_mask;

        ///< DATA 2 pin mask
        uint16_t                     D2_pin_mask;

        ///< DATA 3 pin mask
        uint16_t                     D3_pin_mask;

        ///< DATA 4 pin mask
        uint16_t                     D4_pin_mask;

        ///< DATA 5 pin mask
        uint16_t                     D5_pin_mask;

        ///< DATA 6 pin mask
        uint16_t                     D6_pin_mask;

        ///< DATA 7 pin mask
        uint16_t                     D7_pin_mask;

        ///< RESET pin mask
        uint16_t                     RESET_pin_mask;

        ///< FQ_UD pin mask
        uint16_t                     FQ_UD_pin_mask;

        ///< W_CLK pin mask
        uint16_t                     W_CLK_pin_mask;

        ///< Device ID for AD9850Dev virtual device
        uint8_t                     dev_id;

};

/// \brief Initializes all AD9850Dev virtual devices
void ad9850dev_init();

/// \brief #ON_COMMAND callback for all AD9850Dev devices
/// \param cmd_byte - command byte received from software. Corresponds to CommCommandHeader#command_byte
/// \param data - pointer to data received
/// \param length - length of the received data.
/// \return Result of the operation as communication status.
uint8_t ad9850dev_execute(uint8_t cmd_byte, uint8_t* data, uint16_t length);

/// \brief #ON_READDONE callback for all AD9850Dev devices
/// \param device_id - Device ID of the virtual device which data was read
/// \param length - amount of bytes read.
/// \return Result of the operation as communication status.
uint8_t ad9850dev_read_done(uint8_t device_id, uint16_t length);

/// \brief Add headers for autogenerated functions to set D0-D7 lines
AD9850DEV_FW_SET_DATA_HEADERS

/// @}
#endif